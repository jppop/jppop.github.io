<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deux ou trois choses apprises</title>
    <link>https://jppop.github.io/index.xml</link>
    <description>Recent content on Deux ou trois choses apprises</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Mon, 10 Apr 2017 00:56:56 +0200</lastBuildDate>
    <atom:link href="https://jppop.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring config et modularité</title>
      <link>https://jppop.github.io/2017/04/10/spring-config-et-modularit%C3%A9</link>
      <pubDate>Mon, 10 Apr 2017 00:56:56 +0200</pubDate>
      
      <guid>https://jppop.github.io/2017/04/10/spring-config-et-modularit%C3%A9</guid>
      <description>&lt;p&gt;Comment éviter que l&amp;rsquo;injection de dépendances deviennent un plat de spaghettis.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;le-problème&#34;&gt;Le problème&lt;/h2&gt;

&lt;p&gt;Il y a quelques temps, je suis intervenu sur un projet Java composé de plusieurs modules Maven.
Nous développions une application de bureau en JavaFX embarquant une base données synchronisée avec des données serveurs via des API REST.
Dans ce projet, &lt;strong&gt;Spring Configuration&lt;/strong&gt; est utilisé pour injecter les dépendances.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
L&#39;injection de dépendances est utilisée dans ce projet pour pouvoir remplacer simplement certaines implémentations par des implementations de tests (&#34;bouchons&#34;, _mockup_). Comme dans la plupart des cas.
&lt;/div&gt;

&lt;p&gt;Le module Maven de l&amp;rsquo;application principale inclut les autres modules et configure l&amp;rsquo;injection des dépendances. De &lt;em&gt;tous&lt;/em&gt; les modules. Plusieurs fichiers de configuration Spring &lt;code&gt;applicationContext*.xml&lt;/code&gt; ainsi que plusieurs fichiers &lt;code&gt;persistence.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dans les autres modules, des tests unitaires et d&amp;rsquo;intégration sont implémentés. Là encore, les développeurs ont inclus des fichiers de configuration Spring. Les mêmes ou presque que ceux du module de l&amp;rsquo;application principale.&lt;/p&gt;

&lt;p&gt;Finalement, le projet s&amp;rsquo;est retrouvé avec une multitude de fichiers de configuration : 28 fichiers pour une demi douzaine de modules utilisant l&amp;rsquo;injection.
Pire, certains développeurs, pour éviter certainement de déclarer à nouveau les injections, ont développé des tests dans des modules qui les déclaraient déjà mais qui n&amp;rsquo;avait rien à voir avec la nature des tests.&lt;/p&gt;

&lt;h2 id=&#34;la-solution&#34;&gt;La solution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://jppop.github.io/images/dry-soc-low.jpg&#34; alt=&#34;DRY - Separation of Concerns&#34; style=&#34;width: 50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Evidemment, il s&amp;rsquo;agit d&amp;rsquo;un problème couvert par les patterns &lt;strong&gt;&lt;em&gt;Don&amp;rsquo;t Repeat Yourself&lt;/em&gt;&lt;/strong&gt; et, surtout, &lt;strong&gt;&lt;em&gt;Separation of concerns&lt;/em&gt;&lt;/strong&gt;. Séparation des responsabilités parce que l&amp;rsquo;injection des dépendances d&amp;rsquo;un module ne devrait être que de sa responsabilité. Un module implémentant une couche d&amp;rsquo;accès aux données, par exemple, a, &lt;em&gt;lui seul&lt;/em&gt;, la responsabilité des bibliothèques qu&amp;rsquo;il utilise.&lt;/p&gt;

&lt;p&gt;La plupart des moteurs d&amp;rsquo;injection (mais pas ceux à injection), Guice, HK2 et Spring Configuration, permettent facilement de résoudre ce problème.
Pour Spring, il suffit d&amp;rsquo;utiliser la possibilité d&amp;rsquo;importer des définitions.&lt;/p&gt;

&lt;p&gt;Par exemple, dans un module &amp;ldquo;client&amp;rdquo; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@Import({ DataConfig.class, CommonConfig.class, SyncConfig.class })
public class AppConfig {

  // ... autres définitions propres à l&#39;application
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les classes de configuration importées, &lt;code&gt;DataConfig&lt;/code&gt;, &lt;code&gt;CommonConfig&lt;/code&gt; et &lt;code&gt;SyncConfig&lt;/code&gt;, proviennent d&amp;rsquo;autres modules (d&amp;rsquo;autres jars). Chacune de ces classes définissent leurs dépendances.
Et &lt;code&gt;SyncConfig&lt;/code&gt; définit des dépendances (d&amp;rsquo;autres modules du projet) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@Import({ CommonConfig.class, RepositoryConfig.class,  NomadeJaxRsServiceConfig.class })
@Lazy
public class SyncConfig {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et si on a besoin de remplacer une implémentation dans un module client ? Il suffit de surcharger la défition du bean, avec Spring, c&amp;rsquo;est celui qui parle en dernier qui a raison.&lt;/p&gt;

&lt;p&gt;Par exemple, j&amp;rsquo;ai besoin d&amp;rsquo;une configuration où je veux tous les services sauf la base de données (utilisation de PostgreSQL embarquée de test) et un service qui ne synchronise pas les données modifiées localement (le bean Uploader).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@Profile(&amp;quot;mock&amp;quot;)
@Import({AppConfig.class, EmbeddedPgConfig.class})
@Lazy
public class MockConfig {

	@Bean
	public Uploader uploader() {
		return new MockUploaderImpl();
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La classe de configuration &lt;code&gt;MockConfig&lt;/code&gt; définit tous les services &amp;ldquo;réels&amp;rdquo; en important la classe &lt;code&gt;AppConfig&lt;/code&gt;, importe une classe de configuration, &lt;code&gt;EmbeddedPgConfig&lt;/code&gt; qui va modifier la configuration de PostgreSQL et redéfinit le bean Uploader en le remplaçant par un &lt;em&gt;mock&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Voila. Le but est atteint :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La configuration des dépendances n&amp;rsquo;est pas répétée deux fois.&lt;/li&gt;
&lt;li&gt;Chaque module définit ses propres dépendances dans une classe qu&amp;rsquo;il expose.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>good to great</title>
      <link>https://jppop.github.io/2017/04/10/good-to-great</link>
      <pubDate>Mon, 10 Apr 2017 00:56:44 +0200</pubDate>
      
      <guid>https://jppop.github.io/2017/04/10/good-to-great</guid>
      <description>&lt;p&gt;Pourquoi ce blog.
&lt;/p&gt;

&lt;h1 id=&#34;améliorer-la-qualité&#34;&gt;Améliorer la qualité&lt;/h1&gt;

&lt;p&gt;Cela fait quelques temps que j&amp;rsquo;ai envie d&amp;rsquo;écrire un blog pour partager quelques trucs simples et pratiques essentiellement destinés aux développeurs débutant.
J&amp;rsquo;ai choisi &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; pour l&amp;rsquo;écrire. Son tuto commence par un post &amp;ldquo;&lt;em&gt;Good to Great&lt;/em&gt;&amp;rdquo; qui est le debut d&amp;rsquo;une critique du livre du même nom. Je n&amp;rsquo;ai pas lu le livre mais il m&amp;rsquo;a donné envie de réfléchir comment, à notre niveau de développeur (le livre semble s&amp;rsquo;adresser à des managers), nous pouvons &lt;strong&gt;améliorer la qualité&lt;/strong&gt; de ce que nous produisons.&lt;/p&gt;

&lt;h2 id=&#34;la-qualité&#34;&gt;La qualité ?&lt;/h2&gt;

&lt;p&gt;La qualité dont il est question ici est bien sûr la qualité logicielle. La &lt;a href=&#34;https://fr.wikipedia.org/wiki/Qualit%C3%A9_logicielle&#34;&gt;page Wikipedia sur le sujet&lt;/a&gt; définit très clairement ce qu&amp;rsquo;est la qualité logicielle et les critères qui permettent de la mesurer (définis par des normes dont ISO/IEC 25010).&lt;/p&gt;

&lt;p&gt;Ce qui peut paraître étrange, c&amp;rsquo;est que la &amp;ldquo;mauvaise&amp;rdquo; qualité logicielle est un problème décrit depuis 1960 :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Un phénomène de baisse des prix du matériel informatique et d&amp;rsquo;augmentation des prix du logiciel, accompagné d&amp;rsquo;une baisse de la qualité des logiciels a été identifié à la fin des années 1960.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;&lt;a href=&#34;https://fr.wikipedia.org/wiki/Qualit%C3%A9_logicielle&#34;&gt;Wikipedia, La qualité logicielle&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;difficile-de-faire-de-la-qualité&#34;&gt;Difficile de faire de la qualité&lt;/h2&gt;

&lt;p&gt;La mauvaise qualité logicielle est donc un problème connu et assez généralisé. Certains facteurs de ce problème sont inhérents au métier même de la production logicielle : difficulté d&amp;rsquo;exprimer et de comprendre un besoin, impossibilité de ne pas faire d&amp;rsquo;erreur en programmation et de le vérifier, erreur de conception, etc.&lt;/p&gt;

&lt;p&gt;Il existe cependant des moyens (des méthodes de productions logicielle, de contrôle de qualité, &amp;hellip;), connus de tous, qui permettent de diminuer les cas où un logiciel n&amp;rsquo;atteint pas ses objectifs de qualité.&lt;/p&gt;

&lt;p&gt;D&amp;rsquo;autres moyens &amp;ldquo;émergent&amp;rdquo; comme le mouvement &lt;strong&gt;&lt;em&gt;DevOps&lt;/em&gt;&lt;/strong&gt;. Certaines compagnies arrivent, par exemple, à déployer leur logiciel en production très fréquemment. Par exemple &lt;a href=&#34;http://swreflections.blogspot.fr/2013/09/this-is-how-facebook-develops-and.html&#34;&gt;Facebook&lt;/a&gt; s&amp;rsquo;appuie, en autre, sur la revue de code, les tests automatisés et responsabilise fortement chaque développeur pour la mise en production de ce qu&amp;rsquo;il a développé. Le &lt;a href=&#34;https://www.theguardian.com/info/developer-blog/2015/jan/05/delivering-continuous-delivery-continuously&#34;&gt;Guardian&lt;/a&gt; décrit aussi comment ils ont amélioré la qualité de leur site en &amp;ldquo;responsabilisant&amp;rdquo; leurs développeurs.&lt;/p&gt;

&lt;p&gt;Bien. Que ce soit des moyens anciens (tests automatisés, revue de code, intégration continue) ou nouveau, la réalité est quelque peu différente dans nos projets de tous les jours.
Parce que nous constatons que tous ces &amp;ldquo;principes&amp;rdquo; ne sont souvent pas mis en oeuvre ou que partiellement. Et dans la plupart des cas, par manque de temps.&lt;/p&gt;

&lt;h2 id=&#34;prix-tirés-vers-le-bas&#34;&gt;Prix tirés vers le bas&lt;/h2&gt;

&lt;p&gt;Notre métier, spécialement en SSII, est soumis à une très grande concurrence, nous devons constamment tirer les prix vers le bas.&lt;/p&gt;

&lt;p&gt;A titre d&amp;rsquo;exemple, je prendrai le taux que nous appliquons sur les coûts &amp;ldquo;Développement + Tests&amp;rdquo; pour obtenir le coût total du développement d&amp;rsquo;un projet Ce taux permet d&amp;rsquo;obtenir le coût total en fonction d&amp;rsquo;abaques. Par expérience, nous savons que pour produire 1 jour de code, il faut avoir produit 0,6 jours de spécifications, il faudra produire 0,4 jour de tests d&amp;rsquo;intégration. Et d&amp;rsquo;autres taux encore pour la qualification, le packaging, la VABF, VSR et le pilotage. Bref, ce taux est aujourd&amp;rsquo;hui (dans ma boîte en tout cas) proche de 2. Il y a 15 ans, il était de 3.&lt;/p&gt;

&lt;p&gt;Un gain de productivité de 66% ! Qu&amp;rsquo;est ce qui a pu nous faire gagner autant ? De meilleurs outils ? Des meilleurs frameworks ? Certes, il y eu des amelioration mais jamais dans de telle proportions.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est tout simplement que nous avons baissé nos prix de ventes mais en prétendant faire toujours la même qualité.&lt;/p&gt;

&lt;h2 id=&#34;rester-positif&#34;&gt;Rester positif&lt;/h2&gt;

&lt;p&gt;Je pourrais continuer à developper ma vision de ce qu&amp;rsquo;est devenu notre métier mais je préfère réfléchir à comment continuer à nous améliorer (c&amp;rsquo;est moins déprimant). Proposer des idées simples, avec les moyens à notre disposition, pour tenter de produire des logiciels de qualité.&lt;/p&gt;

&lt;h2 id=&#34;quelques-idées-à-développer&#34;&gt;Quelques idées (à développer)&lt;/h2&gt;

&lt;p&gt;Je continuerai à proposer des idées et à les poster ici.&lt;/p&gt;

&lt;p&gt;Des premières pistes :
&lt;dl&gt;
  &lt;dt&gt;Développement ouvert&lt;/dt&gt;
    &lt;dd&gt;
    Le modèle courant des développements en SSII (et chez nos clients) est le modèle fermé. Je suis convaincu que si nous développions tout ou partie en mode ouvert (&lt;em&gt;Open source&lt;/em&gt;), nous pourrions sans doute améliorer la qualité de nos développements mais, aussi, réduire nos coûts en favorisant la réutilisation. Pour se convaincre, on peut penser aux &lt;a href=&#34;https://github.com/explore&#34;&gt;projets open source&lt;/a&gt; de Google (Guice, Guava et beaucoup d&amp;rsquo;autres), &lt;a href=&#34;https://github.com/Netflix/&#34;&gt;Netflix&lt;/a&gt;, à &lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React&lt;/a&gt;, &lt;a href=&#34;https://github.com/facebook/react-native&#34;&gt;React Native&lt;/a&gt; de Facebook, &lt;a href=&#34;https://github.com/Microsoft/vscode&#34;&gt;VS Code&lt;/a&gt;, &lt;a href=&#34;https://github.com/Microsoft/TypeScript&#34;&gt;TypeScript&lt;/a&gt; de Microsoft. Et aussi Backbone.js (développé par DocumentCloud, un regroupement de journaux, dont le New York Times).&lt;/br&gt;
    &lt;em&gt;à developer dans un autre post&lt;/em&gt;
    &lt;/dd&gt;
    &lt;dt&gt;Documentation&lt;/dt&gt;
    &lt;dd&gt;
        Une piste sur les outils de documentations techniques (MS Word nous fait perdre du temps, AcsiiDoctor permet d&amp;rsquo;être beaucoup plus productif).&lt;/br&gt;
        &lt;em&gt;à developer dans un autre post&lt;/em&gt;
    &lt;/dd&gt;
&lt;/dl&gt;&lt;/p&gt;

&lt;p&gt;To be continued.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>