<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on Deux ou trois choses apprises</title>
    <link>https://jppop.github.io/slides/</link>
    <description>Recent content in Slides on Deux ou trois choses apprises</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Apr 2019 16:43:02 -0400</lastBuildDate>
    
	<atom:link href="https://jppop.github.io/slides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quick Tips -- NullPointerException</title>
      <link>https://jppop.github.io/slides/npe/</link>
      <pubDate>Sat, 13 Apr 2019 16:43:02 -0400</pubDate>
      
      <guid>https://jppop.github.io/slides/npe/</guid>
      <description>class: center, middle
NullPointerException La chasse aux NullPointerExceptions NullPointerException  I call it my billion-dollar mistake. It was the invention of the null reference in 1965… This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.
Sir Charles Antony Richard Hoare, inventor of the Null Reference
 Deux règles seulement  Les autres, c’est l’enfer</description>
    </item>
    
    <item>
      <title>Quick Tips -- Refactoring</title>
      <link>https://jppop.github.io/slides/refactoring/</link>
      <pubDate>Sat, 13 Apr 2019 16:43:02 -0400</pubDate>
      
      <guid>https://jppop.github.io/slides/refactoring/</guid>
      <description>class: center, middle
Refactoring Ou comment éviter le copier/coller (et faciliter la maintenance) T’es sûr, c’est mal copier/coller ?  .focus[Rapide], sûr (ca marche déjà) Quand utiliser le copier/coller ?  .focus[Forking] .focus[Templating] .focus[Tests, exploration]   &amp;ndash;
.see-also[ Pour approfondir : Is Copy and Paste Programming Really a Problem?]
Mais Fais quelque chose si on est on est un jour ouvré :
public void doSomeThingAt(LocalDate when) { if (isBusinessDay(when)) { // .</description>
    </item>
    
    <item>
      <title>Quick Tips -- Spring Batch Unit Testing</title>
      <link>https://jppop.github.io/slides/spring-batch-test/</link>
      <pubDate>Sat, 13 Apr 2019 16:43:02 -0400</pubDate>
      
      <guid>https://jppop.github.io/slides/spring-batch-test/</guid>
      <description>class: center, middle
Spring Batch Unit Testing Tester les applications basées sur Spring Batch Le batch Basé sur le guide Creating a Batch Service.
@Bean public Step step1(JdbcBatchItemWriter&amp;lt;Person&amp;gt; writer) { return stepBuilderFactory.get(&amp;quot;step1&amp;quot;) .&amp;lt;Person, Person&amp;gt; chunk(10) .reader(reader()) .processor(processor()) .writer(writer) .build(); }  Et quelques &amp;ldquo;vrais&amp;rdquo; exemples.
Nos outils La batch est testé avec :
 JUnit, Mockito, AssertJ Le JUnit runner .focus[SpringJUnit4ClassRunner] .focus-high[spring-batch-test]  .note[ La documentation en ligne : Spring Batch Unit Testing ]</description>
    </item>
    
  </channel>
</rss>